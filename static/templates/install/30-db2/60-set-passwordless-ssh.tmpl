#!/bin/bash

BASE=$(readlink -f $(dirname $0)/)
SETENVSCRIPT=$BASE/00-set-env.sh
source $SETENVSCRIPT

start=$SECONDS
INST_NAME={{.Spec.DB2.Required.InstanceName}}

log ================================================
log "Set passord less SSH for $INST_NAME"
log ================================================

{{$firstHost := getFirstHost .Spec.Nodes.Required.NamesAsList}}

command="id -u $INST_NAME"
log Run command on {{$firstHost}} -- $command
$SSH {{$firstHost}} "$command"
if [ $? -ne 0 ] ; then
   log "Instance user $INST_NAME does not exist."
   exit 1
fi  

cat << EOF > /tmp/passwordlessssh
#!/bin/bash
su - $INST_NAME
rm -fr .ssh 2>&1 > /dev/null
ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa
cd .ssh
/bin/cp id_rsa.pub authorized_keys
chmod 600 authorized_keys
echo 'host *' > config
echo '    StrictHostKeyChecking no' >> config
chmod 600 config
exit
exit
EOF

log Generate public/private keys on {{$firstHost}}
log ======================================================================== 
$SSH -tt {{$firstHost}} "/bin/bash -s" -- </tmp/passwordlessssh

IPARRAY=({{.Spec.Nodes.Required.IPAddressesAsList}})
HOSTARRAY=({{.Spec.Nodes.Required.NamesAsList}})

> /tmp/known_hosts
for (( i=0; i<${#HOSTARRAY[@]}; i++ ));
do
    shortName=$(echo ${HOSTARRAY[i]} | cut -d"." -f1)
    command="ssh-keyscan -t ecdsa $shortName,${HOSTARRAY[i]},${IPARRAY[i]}"
    log Run command -- $command
    $command >> /tmp/known_hosts 2>/dev/null
done

for host in {{excludeFirstHost (.Spec.Nodes.Required.NamesAsList)}}
do
    log ======================================================================== 
    command="mkdir -p /home/$INST_NAME/.ssh"
    log Run command on $host -- $command
    $SSH $host "$command"

    command="chmod 700 /home/$INST_NAME/.ssh"
    log Run command on $host -- $command
    $SSH $host "$command"

    log Copy .ssh from {{$firstHost}} to $host
    log ======================================================================== 
    log "$SCP {{$firstHost}}:/home/$INST_NAME/.ssh $host:/home/$INST_NAME"
    $SCP -rp {{$firstHost}}:/home/$INST_NAME/.ssh $host:/home/$INST_NAME
done 

for host in {{.Spec.Nodes.Required.NamesAsList}}
do
    log ======================================================================== 
    log "$SCP -rp /tmp/known_hosts $host:/home/$INST_NAME/.ssh"
    $SCP -rp /tmp/known_hosts $host:/home/$INST_NAME/.ssh 

    log ======================================================================== 
    command="chown -R $INST_NAME.$INST_NAME /home/$INST_NAME/.ssh"
    log Run command on $host -- $command
    $SSH $host "$command" 
done  


log ========================================================================
end=$SECONDS
log $0 took $((end-start)) seconds to complete
log ========================================================================
exit $RC